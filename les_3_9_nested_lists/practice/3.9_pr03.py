# На вход программе подается матрица чисел из трех строк. В каждой строке числа разделяются пробелом. Необходимо прочитать эти числа и сохранить в виде двумерного (вложенного) списка. Затем, вывести на экран последний столбец этой матрицы (двумерного списка) в виде строки из трех чисел, записанных через пробел.
#
# Тесты: https://github.com/selfedu-rus/test-python-base/tree/main/3/3.9.3
#
# Sample Input:
# 8 11 12 1
# 9 4 36 -4
# 1 12 49 5
# Sample Output:
# 1 -4 5

#lst01 = [8, 11, 12, 1]
#lst02 = [9, 4, 36, -4]
#lst03 = [1, 12, 49, 5]

#lst01 = input().split()
#lst02 = input().split()
#lst03 = input().split()

# шаблон ввода цифровых значений

lst01 = list(map(int,input().split()))
lst02 = list(map(int,input().split()))
lst03 = list(map(int,input().split()))

lst = [*lst01[-1:], *lst02[-1:], *lst03[-1:]]

print(*lst)

# В Python оператор * перед списком в контексте распаковки означает, что элементы списка будут извлечены и вставлены по отдельности, а не весь список как один объект.
#
# Без распаковки:
# a = [10, 20, 30]
# b = [a]  # просто вложили список в другой
# print(b)  # результат: [[10, 20, 30]]
# С распаковкой *:
# a = [10, 20, 30]
# b = [*a]  # распаковали элементы a в новый список
# print(b)  # результат: [10, 20, 30]
# Как * работает в print():
# a = [10, 20, 30]
# print(a)      # выведет: [10, 20, 30]
# print(*a)     # выведет: 10 20 30
#
# Пример с функцией
# Допустим, у нас есть функция, которая принимает три аргумента:

# def show_coords(x, y, z):
#     print(f"x = {x}, y = {y}, z = {z}")
# Выхов
# show_coords(10, 20, 30)
# Если координаты в списке:
# coords = [10, 20, 30]
# show_coords(coords)
# ❌ Будет ошибка, потому что функция ждёт три отдельных числа, а не один список.
#
# Необходимо применить распаковку:
#
# show_coords(*coords)
# ✅ И теперь 10, 20, 30 будут переданы как отдельные аргументы — всё работает!